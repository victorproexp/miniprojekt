@page "/"
@page "/{id:int}"

@inject IPostService Service
@inject IConfiguration Configuration

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>

<a href="submitnewpost" class="btn btn-primary">Create post</a>

<br>

<table class="table">
    <thead>
        <tr>
            <th>Heading</th>
            <th>Date</th>
            <th>Votes</th>
            <th>Topic</th>
            <th>User</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var post in posts)
        {
            <tr>
                <td><a href="postdata/@post.PostId">@post.Heading</a></td>
                <td>@post.Date</td>
                <td>@post.Votes 
                    <button class="btn btn-outline-primary btn-sm" @onclick="(() => Upvote(post.PostId))">↑</button>
                </td>
                @if (post.Topic == null || post.User == null)
                {
                    <td>loading</td>
                    <td>loading</td>   
                }
                else
                {
                    <td>@post.Topic.Text</td>
                    <td>@post.User.Username</td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int? Id { get; set; }
    public IEnumerable<Post> posts = Enumerable.Empty<Post>();
    protected override async Task OnInitializedAsync()
    {
        await Service.GetPosts();
    }

    protected override void OnParametersSet()
    {
        if (Id > 0 && Id < 6)
        {
            posts = Service.Posts.Where(post => post.TopicId == Id).Take(15).Reverse();
        }
        else
        {
            posts = Service.Posts.Take(15).Reverse();
        }
    }

    async Task Upvote(int id)
    {
        await Service.UpvotePost(id);
    }
}
